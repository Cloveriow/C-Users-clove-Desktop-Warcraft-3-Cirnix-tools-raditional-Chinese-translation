<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CirnoLib.Format</name>
    </assembly>
    <members>
        <member name="F:CirnoLib.Format.BLPLib.BlpTexture.Signature">
            <summary>BLP1를 나타내는 매직넘버입니다.</summary>
        </member>
        <member name="P:CirnoLib.Format.BLPLib.BlpTexture.Alpha">
            <summary>Alpha 값이 사용하는 비트 수 입니다. 일반적으로 0 또는 8을 사용합니다.</summary>
        </member>
        <member name="P:CirnoLib.Format.BLPLib.BlpTexture.Width">
            <summary>첫번째 밉맵의 가로 길이입니다.</summary>
        </member>
        <member name="P:CirnoLib.Format.BLPLib.BlpTexture.Height">
            <summary>첫번째 밉맵의 세로 길이입니다.</summary>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.ArgbColor.CopyOpaque(CirnoLib.Format.BLPLib.Legacy.ArgbColor*,CirnoLib.Format.BLPLib.Legacy.ArgbColor*)">
            <summary>Copies an <see cref="T:CirnoLib.Format.BLPLib.Legacy.ArgbColor"/> into another, with forced opaque alpha.</summary>
            <param name="destination">The destination color.</param>
            <param name="source">The source color.</param>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.ArgbColor.CopyWithAlpha(CirnoLib.Format.BLPLib.Legacy.ArgbColor*,CirnoLib.Format.BLPLib.Legacy.ArgbColor*,System.Byte)">
            <summary>Copies an <see cref="T:CirnoLib.Format.BLPLib.Legacy.ArgbColor"/> into another, with forced opaque alpha.</summary>
            <param name="destination">The destination color.</param>
            <param name="source">The source color.</param>
        </member>
        <member name="T:CirnoLib.Format.BLPLib.Legacy.BlpTexture">
            <summary>Encapsulates bitmap data corresponding to a BLP image.</summary>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.BlpTexture.ReadPalette(System.IO.BinaryReader,CirnoLib.Format.BLPLib.Legacy.BlpTexture.AlphaOperation)">
            <summary>Reads a 256 color palette from a stream</summary>
            <param name="reader">The BinaryReader used for reading data in the stream</param>
            <param name="alphaOperation">The operation to apply on each palette entry's alpha component</param>
            <returns>An array of bytes containing the palette entries</returns>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.JpegSurface.CreateStream">
            <summary>Creates a stream for accessing the surface data.</summary>
            <remarks>The returned stream can be used for reading the surface data.</remarks>
            <returns>A stream which can be used to access the surface data.</returns>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.PaletteSurface.ToArray">
            <summary>Gets a copy of the buffer's contents.</summary>
            <returns>A buffer containing the same data as the surface's internal buffer.</returns>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.PaletteSurface.CreateStream">
            <summary>Creates a stream for accessing the surface data.</summary>
            <remarks>The returned stream can be used for reading or modifying the surface data.</remarks>
            <returns>A stream which can be used to access the surface data.</returns>
        </member>
        <member name="T:CirnoLib.Format.BLPLib.Legacy.Surface">
            <summary>Represents a surface of image data.</summary>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.Surface.#ctor(System.Int32,System.Int32,System.Byte,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:CirnoLib.Format.BLPLib.Legacy.Surface"/> class.</summary>
            <remarks>
            The following restriction is imposed on <paramref name="width"/> and <paramref name="height"/>:
            The size in bytes of the uncompressed ARGB data for a given surface must fit into an <see cref="T:System.Int32"/>.
            </remarks>
            <param name="width">The surface width.</param>
            <param name="height">The surface height.</param>
            <param name="alphaBitCount">The alpha bit count.</param>
            <param name="alphaPremultiplied">If set to <c>true</c>, the surface uses premultiplied alpha.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="width"/> or <paramref name="height"/> has a value that is not allowed.</exception>
            <exception cref="T:System.ArgumentException">
            The dimensions specified by <paramref name="width"/> and <paramref name="height"/> are not allowed.
            - or -
            <paramref name="alphaPremultiplied"/> is true while <paramref name="alphaBitCount"/> is zero.
            - or -
            Another parameter verification has failed.
            </exception>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.Surface.#ctor(CirnoLib.Format.BLPLib.Legacy.Surface)">
            <summary>Initializes a new instance of the <see cref="T:CirnoLib.Format.BLPLib.Legacy.Surface"/> class by copying data from another <see cref="T:CirnoLib.Format.BLPLib.Legacy.Surface"/>.</summary>
            <remarks>
            The base implementation in <see cref="T:CirnoLib.Format.BLPLib.Legacy.Surface"/> only copies the common surface characteristics.
            Copying the actual surface data needs to be done by subclasses overriding this constructor.
            </remarks>
            <param name="surface">A reference surface which should be copied.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="surface"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.Surface.Finalize">
            <summary>Releases unmanaged resources and performs other cleanup operations before the <see cref="T:CirnoLib.Format.BLPLib.Legacy.Surface"/> is reclaimed by garbage collection.</summary>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.Surface.Dispose(System.Boolean)">
            <summary>Releases unmanaged and - optionally - managed resources.</summary>
            <remarks>Implementation in the base class do nothing.</remarks>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:CirnoLib.Format.BLPLib.Legacy.Surface.Width">
            <summary>Gets the width of the surface.</summary>
            <value>The width of the surface.</value>
        </member>
        <member name="P:CirnoLib.Format.BLPLib.Legacy.Surface.Height">
            <summary>Gets the height of the surface.</summary>
            <value>The height of the surface.</value>
        </member>
        <member name="P:CirnoLib.Format.BLPLib.Legacy.Surface.AlphaBitCount">
            <summary>Gets the maximum number of bits used for alpha in a pixel.</summary>
            <remarks>
            This information indicates the number of alpha bits used in the underlying format.
            Depending on the actual surface format, there may be no alpha data, or the bit count may vary depending on the pixel.
            This information serves only to give a general idea on how much transparency information is stored in the surface.
            </remarks>
            <value>The maximum number of bits used for alpha.</value>
        </member>
        <member name="P:CirnoLib.Format.BLPLib.Legacy.Surface.IsAlphaPremultiplied">
            <summary>Gets a value indicating whether this instance has premultiplied alpha.</summary>
            <remarks>Note that this property is useless when <see cref="P:CirnoLib.Format.BLPLib.Legacy.Surface.AlphaBitCount"/> is zero.</remarks>
            <value><c>true</c> if this instance has premultiplied alpha; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CirnoLib.Format.BLPLib.Legacy.Surface.IsOpaque">
            <summary>Gets a value indicating whether the surface is opaque.</summary>
            <remarks>This is exactly the same as checking if <see cref="P:CirnoLib.Format.BLPLib.Legacy.Surface.AlphaBitCount"/> is zero.</remarks>
            <value><c>true</c> if the surface is opaque; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CirnoLib.Format.BLPLib.Legacy.Surface.IsTransparent">
            <summary>Gets a value indicating whether the surface is opaque.</summary>
            <remarks>This is exactly the same as checking if <see cref="P:CirnoLib.Format.BLPLib.Legacy.Surface.AlphaBitCount"/> is nonzero.</remarks>
            <value><c>true</c> if the surface is opaque; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.Surface.ValidateDimensions(System.Int32,System.Int32)">
            <summary>Validates the specified surface dimensions.</summary>
            <remarks>
            This method should throw an <see cref="T:System.ArgumentOutOfRangeException"/> if any of the two dimensions are not allowed.
            If the combination of <paramref name="width"/> and <paramref name="height"/> is not allowed, <see cref="T:System.ArgumentException"/> should be thrown.
            Note that the method will be called before object initialization. Thus, the instance should not be used at all from this method.
            </remarks>
            <param name="width">The proposed surface width.</param>
            <param name="height">The proposed surface height.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="width"/> or <paramref name="height"/> has a value that is not allowed.</exception>
            <exception cref="T:System.ArgumentException">The dimensions specified by <paramref name="width"/> and <paramref name="height"/> are not allowed.</exception>
        </member>
        <member name="P:CirnoLib.Format.BLPLib.Legacy.Surface.CanLock">
            <summary>Gets a value indicating whether the surface can be locked.</summary>
            <remarks>
            Locking the surface allows for direct modification of the buffer.
            While it will work nicely with uncompressed formats or fixed length compression formats, it is likely not to be a very good idea for variable-length compression formats.
            </remarks>
            <value><c>true</c> if the surface can be locked; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.Surface.Lock">
            <summary>Locks the surface for direct read/write access.</summary>
            <remarks>
            <see cref="M:CirnoLib.Format.BLPLib.Legacy.Surface.Unlock"/> must be called once direct buffer access is not needed anymore.
            Forgetting to unlock a locked surface is likely to prevent the buffer from being disposed, thus causing a memory leak.
            Neither <see cref="M:CirnoLib.Format.BLPLib.Legacy.Surface.Dispose"/> nor <see cref="M:CirnoLib.Format.BLPLib.Legacy.Surface.Finalize"/> will unlock the surface, for safety reasons.
            </remarks>
            <returns>Information for accessing the surface buffer.</returns>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.Surface.LockInternal(System.Int32@)">
            <summary>Locks the surface for direct read/write access.</summary>
            <param name="stride">The stride.</param>
            <returns></returns>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.Surface.CopyToArgb(CirnoLib.Format.BLPLib.Legacy.SurfaceData)">
            <summary>Copies the contents of the surface to a buffer of same dimensions.</summary>
            <remarks>
            The destination buffer should use the ARGB format represented by <see cref="T:CirnoLib.Format.BLPLib.Legacy.ArgbColor"/>.
            Some basic checks will be done to disallow invalid buffer informations.
            However, it is the responsibility of the caller to provide a valid destination buffer.
            </remarks>
            <param name="surfaceData">Information on the destination buffer.</param>
            <exception cref="T:System.ArgumentException">The dimensions of the buffer specified by <paramref name="surfaceData"/> do not match those of the surface.</exception>
            <exception cref="T:System.InvalidOperationException">The stride in <paramref name="surfaceData"/> does not match the width.</exception>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.Surface.ToArray">
            <summary>Gets a copy of the buffer's contents.</summary>
            <returns>A buffer containing the same data as the surface's internal buffer.</returns>
        </member>
        <member name="M:CirnoLib.Format.BLPLib.Legacy.Surface.CreateStream">
            <summary>Creates a stream for accessing the surface data.</summary>
            <remarks>The returned stream can be used for reading the surface data, and, for some surface formats, to modify the surface data.</remarks>
            <returns>A stream which can be sued to access the surface data.</returns>
        </member>
        <member name="T:CirnoLib.Format.BLPLib.Legacy.Surface.Wrapper">
            <summary>Base class for wrapping a Surface inside another one.</summary>
            <remarks>Inherit this class for defining a new type of surface that itself contains no data.</remarks>
        </member>
        <member name="T:CirnoLib.Format.TgaReader">
            <summary>
            Handles reading Targa (.TGA) images.
            </summary>
        </member>
        <member name="M:CirnoLib.Format.TgaReader.Load(System.Byte[])">
            <summary>
            Reads a Targa (.TGA) image from a byte.
            </summary>
            <param name="buffer">byte array to read.</param>
            <returns>Bitmap that contains the image that was read.</returns>
        </member>
        <member name="M:CirnoLib.Format.TgaReader.Load(System.IO.Stream)">
            <summary>
            Reads a Targa (.TGA) image from a stream.
            </summary>
            <param name="stream">Stream from which to read the image.</param>
            <returns>Bitmap that contains the image that was read.</returns>
            
        </member>
        <member name="F:CirnoLib.Format.Doodad.Data.ItemTablePointer">
            <summary>
            map item table pointer (for dropped items on death)
            if -1 => no item table used
            if >= 0 => the item table with this number will be dropped on death
            </summary>
        </member>
        <member name="F:CirnoLib.Format.UnitsDoo.Data.TypeID">
            <summary>
            iDNR = random item, uDNR = random unit
            </summary>
        </member>
        <member name="F:CirnoLib.Format.UnitsDoo.Data.PlayerNumber">
            <summary>
            owner (player1 = 0, 15 = neutral passive)
            </summary>
        </member>
        <member name="F:CirnoLib.Format.UnitsDoo.Data.HitPoint">
            <summary>
            -1 = use default
            </summary>
        </member>
        <member name="F:CirnoLib.Format.UnitsDoo.Data.ManaPoint">
            <summary>
            -1 = use default, 0 = unit doesn't have mana
            </summary>
        </member>
        <member name="F:CirnoLib.Format.UnitsDoo.Data.ItemTablePointer">
            <summary>
            map item table pointer (for dropped items on death)
            if -1 => no item table used
            if >= 0 => the item table with this number will be dropped on death
            </summary>
        </member>
        <member name="F:CirnoLib.Format.UnitsDoo.Data.Gold">
            <summary>
            gold amount (default = 12500)
            </summary>
        </member>
        <member name="F:CirnoLib.Format.UnitsDoo.Data.Target">
            <summary>
            target acquisition (-1 = normal, -2 = camp)
            </summary>
        </member>
        <member name="F:CirnoLib.Format.UnitsDoo.Data.Level">
            <summary>
            set to1 for non hero units and items
            </summary>
        </member>
        <member name="F:CirnoLib.Format.UnitsDoo.Data.STR">
            <summary>
            0 = use default
            </summary>
        </member>
        <member name="F:CirnoLib.Format.UnitsDoo.Data.AGI">
            <summary>
            0 = use default
            </summary>
        </member>
        <member name="F:CirnoLib.Format.UnitsDoo.Data.INT">
            <summary>
            0 = use default
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Info.W3I_HIDE_MINIMAP_IN_PREVIEW_SCREENS">
            <summary>
            <see cref="F:CirnoLib.Format.W3Info.Flags"/>에 사용되는 속성에 대한 값입니다.
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Info.W3I_MODIFY_ALLY_PRIORITIES">
            <summary>
            <see cref="F:CirnoLib.Format.W3Info.Flags"/>에 사용되는 속성에 대한 값입니다.
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Info.W3I_MELEE_MAP">
            <summary>
            <see cref="F:CirnoLib.Format.W3Info.Flags"/>에 사용되는 속성에 대한 값입니다.
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Info.W3I_PLAYABLE_MAP_SIZE_WAS_LARGE_AND_HAS_NEVER_BEEN_REDUCED_TO_MEDIUM">
            <summary>
            <see cref="F:CirnoLib.Format.W3Info.Flags"/>에 사용되는 속성에 대한 값입니다.
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Info.W3I_MASKED_AREA_ARE_PARTIALLY_VISIBLE">
            <summary>
            <see cref="F:CirnoLib.Format.W3Info.Flags"/>에 사용되는 속성에 대한 값입니다.
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Info.W3I_FIXED_PLAYER_SETTING_FOR_CUSTOM_FORCES">
            <summary>
            <see cref="F:CirnoLib.Format.W3Info.Flags"/>에 사용되는 속성에 대한 값입니다.
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Info.W3I_USE_CUSTOM_FORCES">
            <summary>
            <see cref="F:CirnoLib.Format.W3Info.Flags"/>에 사용되는 속성에 대한 값입니다.
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Info.W3I_USE_CUSTOM_TECHTREE">
            <summary>
            <see cref="F:CirnoLib.Format.W3Info.Flags"/>에 사용되는 속성에 대한 값입니다.
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Info.W3I_USE_CUSTOM_ABILITIES">
            <summary>
            <see cref="F:CirnoLib.Format.W3Info.Flags"/>에 사용되는 속성에 대한 값입니다.
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Info.W3I_USE_CUSTOM_UPGRADES">
            <summary>
            <see cref="F:CirnoLib.Format.W3Info.Flags"/>에 사용되는 속성에 대한 값입니다.
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Info.W3I_MAP_PROPERTIES_MENU_OPENED_AT_LEAST_ONCE_SINCE_MAP_CREATION">
            <summary>
            <see cref="F:CirnoLib.Format.W3Info.Flags"/>에 사용되는 속성에 대한 값입니다.
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Info.W3I_SHOW_WATER_WAVES_ON_CLIFF_SHORES">
            <summary>
            <see cref="F:CirnoLib.Format.W3Info.Flags"/>에 사용되는 속성에 대한 값입니다.
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Info.W3I_SHOW_WATER_WAVES_ON_ROLLING_SHORES">
            <summary>
            <see cref="F:CirnoLib.Format.W3Info.Flags"/>에 사용되는 속성에 대한 값입니다.
            </summary>
        </member>
        <member name="F:CirnoLib.Format.W3Object.IsExtended">
            <summary>
            w3b, w3h, w3t, w3u = false / w3a, w3d, w3q = true
            </summary>
        </member>
    </members>
</doc>
